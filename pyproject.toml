[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pie-modules"
version = "0.15.3"
description = "Model and Taskmodule implementations for PyTorch-IE"
authors = ["Arne Binder <arne.binder@dfki.de>"]
readme = "README.md"
homepage = "https://github.com/arnebinder/pie-modules"
repository = "https://github.com/arnebinder/pie-modules"
packages = [
    { include = "pie_modules", from = "src" },
]
classifiers = [
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
]
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/arnebinder/pie-modules/issues"
"Changelog" = "https://github.com/arnebinder/pie-modules/releases"

[tool.poetry.dependencies]
python = "^3.9"
pytorch-ie = ">=0.31.2,<0.32.0"
pytorch-lightning = "^2.1.0"
torchmetrics = "^1"
# >=4.35 because of BartModelWithDecoderPositionIds, <4.37 because of generation config
# created from model config in BartAsPointerNetwork
transformers = ">=4.35.0,<4.37.0"

[tool.poetry.group.dev.dependencies]
torch = {version = "^2.1.0+cpu", source = "pytorch"}
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
pre-commit = "^3.4.0"
tabulate = "^0.9"
# for TokenClassificationModelWithSeq2SeqEncoderAndCrf
pytorch-crf = ">=0.7.2"
# for rouge metric (tests only) and for NltkSentenceSplitter
nltk = "^3.8.1"
# for NltkSentenceSplitter
flair = "^0.13.1"
# for SpansViaRelationMerger
networkx = "^3.0.0"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry.source]]
name = "pre-release"
url = "https://test.pypi.org/simple/"
priority = "explicit"


[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
